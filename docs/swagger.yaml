basePath: /v1/api
definitions:
  domain.Role:
    enum:
    - root
    - member
    type: string
    x-enum-varnames:
    - Root
    - Member
  handlers.CreateInvoiceRequest:
    properties:
      customer_id:
        type: integer
      details:
        items:
          $ref: '#/definitions/handlers.DetailInvoiceRequest'
        minItems: 1
        type: array
        uniqueItems: true
      warehouse_id:
        type: integer
    required:
    - customer_id
    - details
    - warehouse_id
    type: object
  handlers.DetailInvoiceRequest:
    properties:
      price:
        minimum: 1
        type: number
      quantity:
        minimum: 1
        type: integer
      rice_id:
        type: integer
    required:
    - price
    - quantity
    - rice_id
    type: object
  handlers.authResponse:
    properties:
      token:
        example: eyJJ9.eyJpEzNDR9.fUjDw0
        type: string
    type: object
  handlers.createCustomerRequest:
    properties:
      address:
        example: abc, xyz
        type: string
      email:
        example: example@exp.com
        type: string
      name:
        example: Sentenced
        maxLength: 255
        minLength: 3
        type: string
      phone:
        example: "+84123456789"
        type: string
    required:
    - address
    - email
    - name
    - phone
    type: object
  handlers.createRiceRequest:
    properties:
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  handlers.createUserRequest:
    properties:
      email:
        example: example@exm.com
        type: string
      name:
        example: vertin
        maxLength: 32
        minLength: 3
        type: string
      password:
        example: password
        minLength: 8
        type: string
      phone:
        example: "+84123456788"
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
  handlers.createWarehouseRequest:
    properties:
      capacity:
        example: 1200
        minimum: 1
        type: integer
      image:
        example: 2455.png
        type: string
      location:
        example:
        - 50.12
        - 68.36
        items:
          type: number
        type: array
      name:
        example: store 01
        maxLength: 255
        minLength: 3
        type: string
    required:
    - capacity
    - image
    - location
    - name
    type: object
  handlers.customerResponse:
    properties:
      address:
        example: abc, eyz
        type: string
      email:
        example: ascalon@exp.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Ascalon
        type: string
      phone:
        example: "+84123456789"
        type: string
    type: object
  handlers.errorResponse:
    properties:
      messages:
        example:
        - data not found
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  handlers.invoiceDetailResponse:
    properties:
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      rice_id:
        type: integer
    type: object
  handlers.invoiceResponse:
    properties:
      created_at:
        type: string
      customer_id:
        type: integer
      customer_name:
        type: string
      details:
        items:
          $ref: '#/definitions/handlers.invoiceDetailResponse'
        type: array
      id:
        type: integer
      total_price:
        type: number
      user_id:
        type: integer
      user_name:
        type: string
      warehouse_id:
        type: integer
      warehouse_name:
        type: string
    type: object
  handlers.loginRequest:
    properties:
      email:
        example: ex@email.com
        format: email
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  handlers.pagination:
    properties:
      current_page:
        example: 2
        type: integer
      limit_records:
        example: 5
        type: integer
      next_page:
        example: 2
        type: integer
      prev_page:
        example: 1
        type: integer
      total_pages:
        example: 10
        type: integer
      total_records:
        example: 5
        type: integer
    type: object
  handlers.response:
    properties:
      data: {}
      message:
        example: Success
        type: string
      success:
        example: true
        type: boolean
    type: object
  handlers.responseWithPagination:
    properties:
      data: {}
      message:
        example: Success
        type: string
      pagination:
        $ref: '#/definitions/handlers.pagination'
      success:
        example: true
        type: boolean
    type: object
  handlers.riceResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.updateCustomerRequest:
    properties:
      address:
        example: abc, xyz
        maxLength: 255
        minLength: 1
        type: string
      email:
        example: example@exp.com
        type: string
      name:
        example: Sentenced
        maxLength: 255
        minLength: 3
        type: string
      phone:
        example: "+84123456789"
        type: string
    type: object
  handlers.updateRiceRequest:
    properties:
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  handlers.updateUserRequest:
    properties:
      email:
        example: example@exm.com
        type: string
      name:
        example: vertin
        maxLength: 32
        minLength: 3
        type: string
      password:
        example: password
        maxLength: 64
        minLength: 8
        type: string
      phone:
        example: "+84123456788"
        type: string
    type: object
  handlers.updateWarehouseRequest:
    properties:
      capacity:
        example: 1200
        minimum: 1
        type: integer
      image:
        example: 2455.png
        type: string
      location:
        example:
        - 51.12
        - 68.36
        items:
          type: number
        type: array
      name:
        example: store 01
        maxLength: 255
        minLength: 3
        type: string
    type: object
  handlers.uploadImageRequest:
    type: object
  handlers.uploadImageResponse:
    properties:
      filename:
        example: name.ext
        type: string
    type: object
  handlers.usedCapacityResponse:
    properties:
      used_capacity:
        example: 500
        type: integer
    type: object
  handlers.userResponse:
    properties:
      email:
        example: example@exm.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: vertin
        type: string
      phone:
        example: "+84123456789"
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        example: member
    type: object
  handlers.warehouseItemResponse:
    properties:
      capacity:
        example: 500
        type: integer
      id:
        example: 1
        type: integer
      rice_name:
        example: name
        type: string
    type: object
  handlers.warehouseResponse:
    properties:
      capacity:
        example: 1200
        type: integer
      id:
        type: integer
      image:
        example: 2455.png
        type: string
      location:
        example:
        - 50.12
        - 68.36
        items:
          type: number
        type: array
      name:
        example: store 01
        type: string
    type: object
info:
  contact: {}
  description: This is a RESTful ql-kho-lua.
  title: Qua Ly Kho Lua
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and returns an access token if the credentials
        are valid.
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.authResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      summary: Login and get an access token
      tags:
      - auth
  /customers:
    get:
      consumes:
      - application/json
      description: get customers
      parameters:
      - description: Query
        in: query
        name: q
        type: string
      - default: 1
        description: Skip
        in: query
        minimum: 1
        name: skip
        type: integer
      - default: 5
        description: Limit
        in: query
        minimum: 5
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customers data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.responseWithPagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.customerResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: get customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer and get created user data
      parameters:
      - description: Create customer body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.createCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created customer data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.customerResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Create a new customer and get created user data
      tags:
      - customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: delete customer
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted data
          schema:
            $ref: '#/definitions/handlers.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: delete customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get a customer by customer id
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.customerResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get a customer
      tags:
      - customers
    patch:
      consumes:
      - application/json
      description: update customer
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      - description: Update customer body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.updateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated customer data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.customerResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: update customer
      tags:
      - customers
  /import_invoices:
    get:
      consumes:
      - application/json
      description: Get a list import invoices
      parameters:
      - description: Warehouse id
        in: query
        name: warehouse_id
        type: integer
      - default: 1
        description: Skip
        in: query
        minimum: 1
        name: skip
        type: integer
      - default: 5
        description: Limit
        in: query
        minimum: 5
        name: limit
        type: integer
      - description: Start
        format: date-time
        in: query
        name: start
        type: string
      - description: End
        format: date-time
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invoice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.responseWithPagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.invoiceResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get a list import invoices
      tags:
      - importInvoices
    post:
      consumes:
      - application/json
      description: Create a new import invoice and get created invoice data
      parameters:
      - description: Create invoice body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created invoice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.invoiceResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Create a new import invoice and get created invoice data
      tags:
      - importInvoices
  /import_invoices/{id}:
    get:
      consumes:
      - application/json
      description: Get a import invoice by id
      parameters:
      - description: Invoice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Invoice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.invoiceResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get a import invoice by id
      tags:
      - importInvoices
  /rice:
    get:
      consumes:
      - application/json
      description: get list rice
      parameters:
      - description: Query
        in: query
        name: q
        type: string
      - default: 1
        description: Skip
        in: query
        minimum: 1
        name: skip
        type: integer
      - default: 5
        description: Limit
        in: query
        minimum: 5
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Rice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.responseWithPagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.riceResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: get list rice
      tags:
      - rice
    post:
      consumes:
      - application/json
      description: Create a new rice and get created rice data
      parameters:
      - description: Create rice body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.createRiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created rice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.riceResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Create a new rice and get created rice data
      tags:
      - rice
  /rice/{id}:
    delete:
      consumes:
      - application/json
      description: delete rice
      parameters:
      - description: Rice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted data
          schema:
            $ref: '#/definitions/handlers.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: delete rice
      tags:
      - rice
    get:
      consumes:
      - application/json
      description: Get a rice by user id
      parameters:
      - description: Rice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Rice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.riceResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get a rice
      tags:
      - rice
    patch:
      consumes:
      - application/json
      description: update rice
      parameters:
      - description: Rice id
        in: path
        name: id
        required: true
        type: integer
      - description: Update rice body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.updateRiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated rice data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.riceResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: update rice
      tags:
      - rice
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload temporary images for creating other resources
      parameters:
      - description: Image file
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.uploadImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Uploaded
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.uploadImageResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      summary: Upload image and get a file name
      tags:
      - upload
  /users:
    get:
      consumes:
      - application/json
      description: get users
      parameters:
      - description: Query
        in: query
        name: q
        type: string
      - default: 1
        description: Skip
        in: query
        minimum: 1
        name: skip
        type: integer
      - default: 5
        description: Limit
        in: query
        minimum: 5
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.responseWithPagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.userResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user and get created user data
      parameters:
      - description: Create user body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created user data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.userResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Create a new user and get created user data
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted data
          schema:
            $ref: '#/definitions/handlers.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by user id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.userResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get a user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: Update user body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.userResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: update user
      tags:
      - users
  /warehouses:
    get:
      consumes:
      - application/json
      description: get warehouses
      parameters:
      - description: Query
        in: query
        name: q
        type: string
      - default: 1
        description: Skip
        in: query
        minimum: 1
        name: skip
        type: integer
      - default: 5
        description: Limit
        in: query
        minimum: 5
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Warehouses data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.responseWithPagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.userResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: get warehouses
      tags:
      - warehouses
    post:
      consumes:
      - application/json
      description: Create a new warehouse and get created warehouse data
      parameters:
      - description: Create warehouse body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.createWarehouseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created warehouse data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.warehouseResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Create a new warehouse and get created warehouse data
      tags:
      - warehouses
  /warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a warehouse
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted
          schema:
            $ref: '#/definitions/handlers.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Delete a warehouse
      tags:
      - warehouses
    get:
      consumes:
      - application/json
      description: Get warehouse data by id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.warehouseResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get warehouse data
      tags:
      - warehouses
    patch:
      consumes:
      - application/json
      description: Update a warehouse and get created warehouse data
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: integer
      - description: Update warehouse body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.updateWarehouseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated warehouse data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.warehouseResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "409":
          description: Conflicting data error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Update a warehouse and get created user data
      tags:
      - warehouses
  /warehouses/{id}/inventory:
    get:
      consumes:
      - application/json
      description: Get inventory by warehouse id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Inventory data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.warehouseItemResponse'
                  type: array
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get inventory
      tags:
      - warehouses
  /warehouses/{id}/used_capacity:
    get:
      consumes:
      - application/json
      description: Get used capacity of warehouse by id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: used capacity data
          schema:
            allOf:
            - $ref: '#/definitions/handlers.response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.usedCapacityResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - JWTAuth: []
      summary: Get used capacity
      tags:
      - warehouses
schemes:
- http
- https
securityDefinitions:
  JWTAuth:
    description: Type "JWT" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
